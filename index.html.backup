<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ระบบค้นหาและจัดการสูตรสี</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: 'Sarabun', sans-serif; }
        .formula-card { transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out; }
        .formula-card:hover { transform: translateY(-5px); box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); }
        .nav-btn.active { background-color: #10B981; color: white; }
        .page-btn { transition: background-color 0.2s, color 0.2s; }
        .page-btn.active { background-color: #10B981; color: white; border-color: #10B981; }
        .page-btn:disabled { opacity: 0.5; cursor: not-allowed; }
        .loader { border-top-color: #3498db; -webkit-animation: spin 1s linear infinite; animation: spin 1s linear infinite; }
        @-webkit-keyframes spin { 0% { -webkit-transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); } }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .drop-zone { border: 2px dashed #ccc; border-radius: 0.5rem; padding: 2.5rem; text-align: center; cursor: pointer; transition: background-color 0.2s, border-color 0.2s; }
        .drop-zone--over { background-color: #e9e9e9; border-color: #3498db; }
        .modal-overlay {
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0, 0, 0, 0.6);
            display: flex; align-items: center; justify-content: center;
            z-index: 1000;
        }
        .analytics-chart-wrapper { height: 16rem; position: relative; }
        .analytics-chart-wrapper.tall { height: 18rem; }
        canvas.analytics-chart { width: 100% !important; height: 100% !important; }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <nav class="bg-white shadow-lg sticky top-0 z-20">
        <div class="container mx-auto px-4 md:px-8">
            <div class="flex justify-center items-center py-3">
                <div class="flex space-x-2 md:space-x-4 bg-gray-200 p-1 rounded-lg">
                    <button id="navMainBtn" class="nav-btn px-4 py-2 text-sm md:text-base font-semibold text-gray-700 rounded-md transition">ค้นหาสูตร</button>
                    <button id="navFormulaBtn" class="nav-btn px-4 py-2 text-sm md:text-base font-semibold text-gray-700 rounded-md transition">ค้นหาจากแม่สี</button>
                    <button id="navAnalyticsBtn" class="nav-btn px-4 py-2 text-sm md:text-base font-semibold text-gray-700 rounded-md transition">สรุปข้อมูล</button>
                    <button id="navWipeBtn" class="nav-btn px-4 py-2 text-sm md:text-base font-semibold text-red-600 rounded-md transition">จัดการข้อมูล</button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Search View -->
    <div id="main-view">
        <div class="container mx-auto p-4 md:p-8">
            <header class="text-center mb-8">
                <h1 class="text-3xl md:text-4xl font-bold text-gray-700">ค้นหาสูตรสีทั่วไป</h1>
            </header>
            <div class="bg-white p-6 rounded-xl shadow-md mb-8">
                <div class="grid grid-cols-1 md:grid-cols-5 gap-4 items-end">
                    <div>
                        <label for="bookSearch" class="block text-sm font-medium text-gray-700 mb-1">เล่มที่</label>
                        <input type="text" id="bookSearch" placeholder="เช่น DATA2025..." class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                    </div>
                    <div>
                        <label for="resultCodeSearch" class="block text-sm font-medium text-gray-700 mb-1">รหัสสี</label>
                        <input type="text" id="resultCodeSearch" placeholder="เช่น BN0173..." class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                    </div>
                    <div>
                        <label for="yarnTypeSearch" class="block text-sm font-medium text-gray-700 mb-1">ชนิดด้าย</label>
                        <input type="text" id="yarnTypeSearch" placeholder="เช่น PC16/2..." class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                    </div>
                    <div>
                        <label for="yarnModelSearch" class="block text-sm font-medium text-gray-700 mb-1">รุ่นด้าย</label>
                        <input type="text" id="yarnModelSearch" placeholder="เช่น DG..." class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                    </div>
                    <div>
                        <label for="pageFilter" class="block text-sm font-medium text-gray-700 mb-1">หน้า</label>
                        <input type="number" id="pageFilter" placeholder="เลขหน้า..." class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                    </div>
                </div>
            </div>
            <div id="mainResultsCount" class="mb-4 text-gray-600"></div>
            <div id="mainResultsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
            <div id="mainPagination" class="mt-8 flex justify-center items-center space-x-2"></div>
            <div id="mainNoResults" class="hidden text-center py-16"><p class="text-xl text-gray-500">ไม่พบสูตรสีที่ตรงกับเงื่อนไข</p></div>
        </div>
    </div>

    <!-- Formula Search View -->
    <div id="formula-search-view" class="hidden">
         <div class="container mx-auto p-4 md:p-8">
            <header class="text-center mb-8">
                <h1 class="text-3xl md:text-4xl font-bold text-gray-700">ค้นหาจากส่วนผสมสูตรสี</h1>
                <p class="text-gray-500 mt-2">ระบุรหัสแม่สีและเปอร์เซ็นต์ หรือใช้เครื่องมือเลือกสี</p>
            </header>
            <div class="bg-white p-6 rounded-xl shadow-md mb-8">
                <div id="formula-criteria-container" class="space-y-4"></div>
                <div class="mt-4 flex flex-wrap gap-4 items-center">
                    <button id="addCriterionBtn" class="px-5 py-2 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition">เพิ่มรหัสแม่สี</button>
                    <button id="formulaSearchBtn" class="px-5 py-2 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700 transition">ค้นหาตามส่วนผสม</button>
                </div>

                <div class="mt-8 pt-6 border-t border-gray-200">
                    <h3 class="text-lg font-semibold text-center text-gray-800 mb-4">หรือ ค้นหาจากสีตัวอย่างที่ใกล้เคียงที่สุด</h3>
                    <div class="flex items-center justify-center gap-4">
                        <label for="colorPickerInput" class="font-medium">เลือกสี:</label>
                        <input type="color" id="colorPickerInput" value="#8c8a88" class="w-16 h-10 border border-gray-300 rounded-lg cursor-pointer p-1">
                        <button id="colorSearchBtn" class="px-5 py-2 bg-purple-600 text-white font-semibold rounded-lg hover:bg-purple-700 transition flex items-center gap-2">
                            <i class="fas fa-search"></i> ค้นหาตามสี
                        </button>
                    </div>
                </div>
            </div>
            <div id="formulaResultsCount" class="mb-4 text-gray-600"></div>
            <div id="formulaResultsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
            <div id="formulaPagination" class="mt-8 flex justify-center items-center space-x-2"></div>
            <div id="formulaNoResults" class="hidden text-center py-16"><p class="text-xl text-gray-500">ไม่พบสูตรสีที่ตรงกับเงื่อนไข</p></div>
        </div>
    </div>
    

    <!-- Analytics View -->
    <div id="analytics-view" class="hidden">
        <div class="container mx-auto p-4 md:p-8">
            <header class="text-center mb-8">
                <h1 class="text-3xl md:text-4xl font-bold text-gray-700">แดชบอร์ดสรุปข้อมูล</h1>
                <p class="text-gray-500 mt-2">ดูภาพรวมของสูตรสีที่มีอยู่ในระบบ</p>
            </header>
            <div class="bg-white p-6 md:p-8 rounded-xl shadow-md">
                <div id="analyticsLoading" class="py-16 flex flex-col items-center space-y-4 hidden">
                    <div class="loader ease-linear rounded-full border-8 border-t-8 border-gray-200 h-16 w-16"></div>
                    <p class="text-gray-500">กำลังโหลดข้อมูล...</p>
                </div>
                <div id="analyticsError" class="hidden text-red-600 text-center font-semibold py-6"></div>
                <div id="analyticsContent" class="space-y-8 hidden">
                    <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
                        <div class="bg-slate-50 border border-gray-100 rounded-lg p-5">
                            <p class="text-sm text-gray-500">จำนวนสูตรทั้งหมด</p>
                            <p id="analyticsTotalFormulas" class="text-3xl font-bold text-gray-800 mt-2">0</p>
                        </div>
                        <div class="bg-slate-50 border border-gray-100 rounded-lg p-5">
                            <p class="text-sm text-gray-500">เล่มที่ไม่ซ้ำ</p>
                            <p id="analyticsTotalBooks" class="text-3xl font-bold text-gray-800 mt-2">0</p>
                        </div>
                        <div class="bg-slate-50 border border-gray-100 rounded-lg p-5">
                            <p class="text-sm text-gray-500">อัปเดตล่าสุด</p>
                            <p id="analyticsLatestDate" class="text-2xl font-semibold text-gray-800 mt-2">-</p>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 xl:grid-cols-2 gap-6">
                        <div class="bg-gray-50 rounded-lg p-6 shadow-inner">
                            <div class="flex justify-between items-center">
                                <h3 class="text-lg font-semibold text-gray-700">จำนวนสูตรตามเล่ม</h3>
                                <span class="text-xs text-gray-400">สูงสุด 10 อันดับแรก</span>
                            </div>
                            <div class="analytics-chart-wrapper mt-4">
                                <canvas id="analyticsBookChart" class="analytics-chart"></canvas>
                            </div>
                            <p id="analyticsBookEmpty" class="hidden text-center text-gray-500 mt-6">ยังไม่มีข้อมูลเพียงพอ</p>
                        </div>
                        <div class="bg-gray-50 rounded-lg p-6 shadow-inner">
                            <div class="flex justify-between items-center">
                                <h3 class="text-lg font-semibold text-gray-700">สัดส่วนสูตรตามชนิดด้าย</h3>
                            </div>
                            <div class="analytics-chart-wrapper mt-4">
                                <canvas id="analyticsYarnChart" class="analytics-chart"></canvas>
                            </div>
                            <p id="analyticsYarnEmpty" class="hidden text-center text-gray-500 mt-6">ยังไม่มีข้อมูลเพียงพอ</p>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
                        <div class="bg-gray-50 rounded-lg p-6 shadow-inner xl:col-span-2">
                            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
                                <div>
                                    <h3 class="text-lg font-semibold text-gray-700">แนวโน้มจำนวนสูตรตามเดือน</h3>
                                    <p class="text-xs text-gray-400">เลือกปีเพื่อดูข้อมูลเดือน มกราคม - ธันวาคม</p>
                                </div>
                                <div class="flex items-center gap-2">
                                    <label for="analyticsYearSelect" class="text-sm text-gray-600">ปี:</label>
                                    <select id="analyticsYearSelect" class="border border-gray-300 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" disabled>
                                        <option value="">ไม่มีข้อมูล</option>
                                    </select>
                                </div>
                            </div>
                            <div class="analytics-chart-wrapper tall mt-4">
                                <canvas id="analyticsMonthlyChart" class="analytics-chart"></canvas>
                            </div>
                            <p id="analyticsMonthlyEmpty" class="hidden text-center text-gray-500 mt-6">ยังไม่มีข้อมูลเพียงพอ</p>
                        </div>
                        <div class="bg-gray-50 rounded-lg p-6 shadow-inner">
                            <h3 class="text-lg font-semibold text-gray-700">แม่สีที่พบบ่อยที่สุด</h3>
                            <ul id="analyticsTopIngredients" class="mt-4 space-y-3 text-sm text-gray-700"></ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Management Access Control -->
    <div id="data-management-login" class="hidden">
        <div class="container mx-auto p-4 md:p-8">
            <div class="max-w-md mx-auto">
                <div class="bg-white p-8 rounded-xl shadow-lg border border-gray-200">
                    <div class="text-center mb-6">
                        <div class="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fas fa-lock text-3xl text-red-600"></i>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-700">จัดการข้อมูล</h2>
                        <p class="text-gray-500 mt-2">กรุณาใส่รหัสเข้าถึงเพื่อดำเนินการ</p>
                    </div>

                    <form id="dataAccessForm">
                        <div class="mb-6">
                            <label for="dataAccessCode" class="block text-sm font-medium text-gray-700 mb-2">รหัสเข้าถึง</label>
                            <div class="relative">
                                <input
                                    type="password"
                                    id="dataAccessCode"
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition text-center text-lg tracking-widest"
                                    placeholder="••••••••"
                                    maxlength="7"
                                    autocomplete="off"
                                >
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2">
                                    <button type="button" id="toggleDataPassword" class="text-gray-400 hover:text-gray-600">
                                        <i class="fas fa-eye" id="dataEyeIcon"></i>
                                    </button>
                                </div>
                            </div>
                        </div>

                        <button type="submit" id="dataAccessSubmit" class="w-full px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition">
                            <span id="dataAccessBtnText">เข้าสู่หน้าจัดการข้อมูล</span>
                            <div id="dataAccessLoader" class="loader ease-linear rounded-full border-2 border-t-2 border-white h-4 w-4 mx-auto hidden"></div>
                        </button>

                        <div id="dataAccessError" class="mt-4 text-center text-sm text-red-600 hidden"></div>
                    </form>

                    <div class="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                        <div class="flex items-start">
                            <i class="fas fa-info-circle text-yellow-600 mt-0.5 mr-2"></i>
                            <div class="text-sm text-yellow-700">
                                <p class="font-semibold">หน้านี้สำหรับผู้ดูแลระบบเท่านั้น</p>
                                <p class="mt-1">สามารถ Export ข้อมูลและลบข้อมูลทั้งหมด</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Data Management View -->
    <div id="wipe-view" class="hidden">
        <div class="container mx-auto p-4 md:p-8">
            <header class="text-center mb-8">
                <h1 class="text-3xl md:text-4xl font-bold text-gray-700">จัดการข้อมูล</h1>
                <p class="text-gray-500 mt-2">Export ข้อมูล หรือล้างข้อมูลทั้งหมด</p>

            </header>

            <!-- Data Management Sections -->
            <div id="dataManagementSection" class="max-w-4xl mx-auto mb-12">
                <div class="bg-white p-6 md:p-8 rounded-xl shadow-lg border border-blue-200">
                    <div class="text-center mb-6">
                        <h2 class="text-2xl font-bold text-blue-700 mb-2">
                            <i class="fas fa-download mr-2"></i>Export ข้อมูล
                        </h2>
                        <p class="text-gray-600">ดาวน์โหลดข้อมูลสูตรสีทั้งหมดในรูปแบบต่างๆ</p>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- SQLite Export Card -->
                        <div class="bg-blue-50 p-6 rounded-lg border border-blue-200">
                            <div class="text-center mb-4">
                                <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3">
                                    <i class="fas fa-database text-2xl text-blue-600"></i>
                                </div>
                                <h3 class="text-lg font-semibold text-blue-800">SQLite Database</h3>
                                <p class="text-sm text-blue-600 mt-2">ไฟล์ฐานข้อมูลสำหรับนักพัฒนา</p>
                            </div>
                            <button id="exportSQLiteBtn" class="w-full px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition flex items-center justify-center gap-2">
                                <span>Export SQLite Database</span>
                                <div id="exportSQLiteLoader" class="loader ease-linear rounded-full border-2 border-t-2 border-white h-4 w-4 hidden"></div>
                            </button>
                        </div>

                        <!-- Excel Export Card -->
                        <div class="bg-green-50 p-6 rounded-lg border border-green-200">
                            <div class="text-center mb-4">
                                <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
                                    <i class="fas fa-file-excel text-2xl text-green-600"></i>
                                </div>
                                <h3 class="text-lg font-semibold text-green-800">Excel Database</h3>
                                <p class="text-sm text-green-600 mt-2">ข้อมูลครบถ้วนพร้อม RGB values</p>
                            </div>
                            <button id="exportExcelBtn" class="w-full px-6 py-3 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700 transition flex items-center justify-center gap-2">
                                <span>Export Excel (รูปแบบสมบูรณ์)</span>
                                <div id="exportExcelLoader" class="loader ease-linear rounded-full border-2 border-t-2 border-white h-4 w-4 hidden"></div>
                            </button>
                        </div>
                    </div>

                    <div id="exportStatus" class="mt-6 text-center"></div>

                    <div class="mt-6 p-4 bg-gray-50 rounded-lg">
                        <h4 class="font-semibold text-gray-700 mb-2">ข้อมูลที่ Export ได้:</h4>
                        <ul class="text-sm text-gray-600 space-y-1">
                            <li>• ข้อมูลสูตรสีทั้งหมด (เล่ม, หน้า, แถว)</li>
                            <li>• รหัสสีพร้อมค่า RGB แยกชัด</li>
                            <li>• ส่วนผสมแม่สีและเปอร์เซ็นต์</li>
                            <li>• วันที่และข้อมูลด้าย</li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Import Section -->
            <div class="max-w-4xl mx-auto mb-12">
                <div class="bg-white p-6 md:p-8 rounded-xl shadow-lg border border-orange-200">
                    <div class="text-center mb-6">
                        <h2 class="text-2xl font-bold text-orange-700 mb-2">
                            <i class="fas fa-upload mr-2"></i>Import ข้อมูล
                        </h2>
                        <p class="text-gray-600">นำเข้าข้อมูลสูตรสีจากไฟล์ Excel</p>
                    </div>

                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        <!-- Import Controls -->
                        <div class="space-y-6">
                            <div class="bg-orange-50 p-6 rounded-lg border border-orange-200">
                                <h3 class="text-lg font-semibold text-orange-800 mb-4">เลือกไฟล์ Excel</h3>

                                <div class="space-y-4">
                                    <div>
                                        <button id="selectExcelBtn" class="w-full px-6 py-3 bg-orange-600 text-white font-semibold rounded-lg hover:bg-orange-700 transition flex items-center justify-center gap-2">
                                            <i class="fas fa-file-excel"></i>
                                            <span>เลือกไฟล์ Excel</span>
                                        </button>
                                        <p id="selectedFileName" class="mt-2 text-sm text-gray-600 text-center"></p>
                                    </div>

                                    <div>
                                        <button id="importExcelBtn" class="w-full px-6 py-3 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2" disabled>
                                            <span id="importBtnText">เริ่ม Import ข้อมูล</span>
                                            <div id="importLoader" class="loader ease-linear rounded-full border-2 border-t-2 border-white h-4 w-4 hidden"></div>
                                        </button>
                                    </div>

                                    <div>
                                        <button id="downloadTemplateBtn" class="w-full px-4 py-2 bg-gray-500 text-white font-medium rounded-lg hover:bg-gray-600 transition flex items-center justify-center gap-2">
                                            <i class="fas fa-download"></i>
                                            <span>ดาวน์โหลดเทมเพลต Excel</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Import Status & Instructions -->
                        <div class="space-y-6">
                            <div class="bg-blue-50 p-6 rounded-lg border border-blue-200">
                                <h3 class="text-lg font-semibold text-blue-800 mb-4">วิธีการใช้งาน</h3>
                                <ol class="text-sm text-blue-700 space-y-2 list-decimal list-inside">
                                    <li>ดาวน์โหลดเทมเพลต Excel</li>
                                    <li>กรอกข้อมูลตามรูปแบบที่กำหนด</li>
                                    <li>เลือกไฟล์ที่กรอกข้อมูลแล้ว</li>
                                    <li>กดปุ่ม "เริ่ม Import ข้อมูล"</li>
                                </ol>
                            </div>

                            <div id="importStatus" class="p-4 rounded-lg border hidden">
                                <div id="importStatusContent"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Delete Section -->
            <div class="max-w-3xl mx-auto">
                <div class="bg-white p-6 md:p-8 rounded-xl shadow-lg border border-red-200">
                    <div class="text-center mb-6">
                        <h2 class="text-2xl font-bold text-red-600 mb-2">
                            <i class="fas fa-trash-alt mr-2"></i>ล้างข้อมูลทั้งหมด
                        </h2>
                        <p class="text-gray-500">การดำเนินการนี้จะลบสูตรสีทั้งหมดออกจากฐานข้อมูลถาวร</p>
                    </div>
                <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md mb-6" role="alert">
                    <strong class="font-semibold">คำเตือน:</strong>
                    <span class="block mt-2 text-sm">หลังจากยืนยัน ข้อมูลทั้งหมดจะถูกลบและไม่สามารถกู้คืนได้ กรุณาตรวจสอบให้แน่ใจก่อนดำเนินการ</span>
                </div>
                <form id="wipeForm" class="space-y-6">
                    <div>
                        <label for="wipeCodeInput" class="block text-sm font-medium text-gray-700">รหัสยืนยันการลบ</label>
                        <input type="password" id="wipeCodeInput" class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500" placeholder="กรอกรหัสยืนยัน" autocomplete="off" inputmode="numeric">
                        <p class="text-xs text-gray-500 mt-2">กรอกรหัส 4 หลักเพื่อยืนยัน (จะไม่แสดงรหัสให้ทราบ)</p>
                    </div>
                    <div class="flex items-center justify-between bg-gray-50 border border-gray-200 rounded-lg px-4 py-3">
                        <div>
                            <p class="font-semibold text-gray-700">ผลกระทบ</p>
                            <ul class="list-disc list-inside text-sm text-gray-600">
                                <li>สูตรสีทั้งหมด และส่วนผสมทั้งหมดจะถูกลบ</li>
                                <li>หลังลบต้องนำเข้าข้อมูลใหม่ด้วยไฟล์ Excel</li>
                            </ul>
                        </div>
                        <div class="text-4xl text-red-500">
                            <i class="fas fa-triangle-exclamation"></i>
                        </div>
                    </div>
                    <div class="text-right">
                        <button type="submit" id="wipeConfirmBtn" class="px-5 py-3 bg-red-600 text-white font-semibold rounded-lg shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">ลบข้อมูลทั้งหมด</button>
                    </div>
                </form>
                    <div id="wipeStatus" class="mt-4 text-center text-sm"></div>
                </div>
            </div>

        </div>
    </div>


    <!-- Edit Modal -->
    <div id="editModal" class="modal-overlay hidden">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md m-4">
            <div class="p-6 border-b flex justify-between items-center">
                <h3 class="text-xl font-semibold text-gray-800">แก้ไขข้อมูลสูตรสี</h3>
                <button id="closeEditModalBtn" class="text-gray-400 hover:text-gray-600 text-2xl">&times;</button>
            </div>
            <div class="p-6">
                <form id="editForm">
                    <input type="hidden" id="editFormulaId">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="editBook" class="block text-sm font-medium text-gray-700">เล่ม</label>
                            <input type="text" id="editBook" class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-lg">
                        </div>
                        <div>
                            <label for="editSwatchColor" class="block text-sm font-medium text-gray-700">สีตัวอย่าง</label>
                             <input type="color" id="editSwatchColor" class="mt-1 w-full h-10 border border-gray-300 rounded-lg p-1">
                        </div>
                        <div>
                            <label for="editPage" class="block text-sm font-medium text-gray-700">หน้าที่</label>
                            <input type="number" id="editPage" class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-lg">
                        </div>
                         <div>
                            <label for="editRow" class="block text-sm font-medium text-gray-700">แถวที่</label>
                            <input type="number" id="editRow" class="mt-1 w-full px-3 py-2 border border-gray-300 rounded-lg">
                        </div>
                    </div>
                </form>
            </div>
            <div class="px-6 py-4 bg-gray-50 flex justify-end space-x-3">
                 <button id="cancelEditBtn" type="button" class="px-4 py-2 bg-gray-200 text-gray-700 font-medium rounded-lg hover:bg-gray-300">ยกเลิก</button>
                <button id="saveEditBtn" type="button" class="px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700">บันทึก</button>
            </div>
        </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal-overlay hidden">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md m-4">
            <div class="p-6 border-b flex justify-between items-center">
                <h3 class="text-xl font-semibold text-gray-800">ยืนยันการลบข้อมูล</h3>
                <button id="closeDeleteModalBtn" class="text-gray-400 hover:text-gray-600 text-2xl">&times;</button>
            </div>
            <div class="p-6">
                <p class="text-gray-600 mb-4">คุณแน่ใจหรือไม่ว่าต้องการลบข้อมูลนี้? การกระทำนี้ไม่สามารถย้อนกลับได้</p>
                <input type="hidden" id="deleteFormulaId">
            </div>
            <div class="px-6 py-4 bg-gray-50 flex justify-end space-x-3">
                 <button id="cancelDeleteBtn" type="button" class="px-4 py-2 bg-gray-200 text-gray-700 font-medium rounded-lg hover:bg-gray-300">ยกเลิก</button>
                <button id="confirmDeleteBtn" type="button" class="px-4 py-2 bg-red-600 text-white font-medium rounded-lg hover:bg-red-700">ยืนยันการลบ</button>
            </div>
        </div>
    </div>

    <!-- Notification Toast -->
    <div id="notificationToast" class="fixed bottom-5 right-5 bg-gray-800 text-white py-3 px-6 rounded-lg shadow-lg transition-transform transform translate-y-20 opacity-0 z-[1001]">
        <p id="notificationMessage"></p>
    </div>


    <script>
        // --- GLOBAL STATE & CONSTANTS ---
        let allColorFormulas = [];
        const ITEMS_PER_PAGE = 12;
        let mainCurrentPage = 1, mainFilteredResults = [];
        let formulaCurrentPage = 1, formulaFilteredResults = [];
        let selectedExcelFilePath = null;
        let analyticsData = null;
        const analyticsCharts = {};
        let analyticsMonthlyData = null;
        let selectedAnalyticsYear = null;
        let activeView = 'main';
        let dataManagementAccess = false;
        const DATA_ACCESS_CODE = 'LAB1221';
        
        // --- UI ELEMENTS ---
        const mainView = document.getElementById('main-view');
        const formulaSearchView = document.getElementById('formula-search-view');
        const analyticsView = document.getElementById('analytics-view');
        const wipeView = document.getElementById('wipe-view');
        const editModal = document.getElementById('editModal');
        const deleteModal = document.getElementById('deleteModal');
        const notificationToast = document.getElementById('notificationToast');
        const notificationMessage = document.getElementById('notificationMessage');
        const navMainBtn = document.getElementById('navMainBtn');
        const navFormulaBtn = document.getElementById('navFormulaBtn');
        const navAnalyticsBtn = document.getElementById('navAnalyticsBtn');
        const navWipeBtn = document.getElementById('navWipeBtn');
        const mainInputs = { book: document.getElementById('bookSearch'), resultCode: document.getElementById('resultCodeSearch'), yarnType: document.getElementById('yarnTypeSearch'), yarnModel: document.getElementById('yarnModelSearch'), page: document.getElementById('pageFilter') };
        const analyticsLoading = document.getElementById('analyticsLoading');
        const analyticsError = document.getElementById('analyticsError');
        const analyticsContent = document.getElementById('analyticsContent');
        const analyticsTotalFormulas = document.getElementById('analyticsTotalFormulas');
        const analyticsTotalBooks = document.getElementById('analyticsTotalBooks');
        const analyticsLatestDate = document.getElementById('analyticsLatestDate');
        const analyticsTopIngredients = document.getElementById('analyticsTopIngredients');
        const analyticsBookChartEl = document.getElementById('analyticsBookChart');
        const analyticsYarnChartEl = document.getElementById('analyticsYarnChart');
        const analyticsMonthlyChartEl = document.getElementById('analyticsMonthlyChart');
        const analyticsYearSelect = document.getElementById('analyticsYearSelect');
        const analyticsBookWrapper = analyticsBookChartEl?.parentElement;
        const analyticsYarnWrapper = analyticsYarnChartEl?.parentElement;
        const analyticsMonthlyWrapper = analyticsMonthlyChartEl?.parentElement;
        const analyticsBookEmpty = document.getElementById('analyticsBookEmpty');
        const analyticsYarnEmpty = document.getElementById('analyticsYarnEmpty');
        const analyticsMonthlyEmpty = document.getElementById('analyticsMonthlyEmpty');
        const wipeStatus = document.getElementById('wipeStatus');
        const wipeConfirmBtn = document.getElementById('wipeConfirmBtn');
        const wipeCodeInput = document.getElementById('wipeCodeInput');
        const wipeForm = document.getElementById('wipeForm');
        const mainResultsGrid = document.getElementById('mainResultsGrid');
        const mainResultsCount = document.getElementById('mainResultsCount');
        const mainNoResults = document.getElementById('mainNoResults');
        const mainPagination = document.getElementById('mainPagination');
        const criteriaContainer = document.getElementById('formula-criteria-container');
        const formulaResultsGrid = document.getElementById('formulaResultsGrid');
        const formulaResultsCount = document.getElementById('formulaResultsCount');
        const formulaNoResults = document.getElementById('formulaNoResults');
        const formulaPagination = document.getElementById('formulaPagination');

        // Export Elements
        const exportSQLiteBtn = document.getElementById('exportSQLiteBtn');
        const exportExcelBtn = document.getElementById('exportExcelBtn');
        const exportSQLiteLoader = document.getElementById('exportSQLiteLoader');
        const exportExcelLoader = document.getElementById('exportExcelLoader');
        const exportStatus = document.getElementById('exportStatus');

        // Data Management Access Elements
        const dataManagementLogin = document.getElementById('data-management-login');
        const dataAccessForm = document.getElementById('dataAccessForm');
        const dataAccessCode = document.getElementById('dataAccessCode');
        const dataAccessSubmit = document.getElementById('dataAccessSubmit');
        const dataAccessBtnText = document.getElementById('dataAccessBtnText');
        const dataAccessLoader = document.getElementById('dataAccessLoader');
        const dataAccessError = document.getElementById('dataAccessError');
        const toggleDataPassword = document.getElementById('toggleDataPassword');
        const dataEyeIcon = document.getElementById('dataEyeIcon');
        
        // --- API & DATA HANDLING ---
        async function fetchFormulas(options = {}) {
            const { preserveMainPage = false, preserveFormulaPage = false } = options;
            const previousMainPage = mainCurrentPage;
            const previousFormulaPage = formulaCurrentPage;
            try {
                mainResultsGrid.innerHTML = '<div class="col-span-full text-center p-8"><div class="loader ease-linear rounded-full border-8 border-t-8 border-gray-200 h-32 w-32 mx-auto"></div><p class="mt-4">กำลังโหลดข้อมูล...</p></div>';
                allColorFormulas = await window.electronAPI.getFormulas();
                if (formulaFilteredResults.length > 0) {
                    const formulaMap = new Map(allColorFormulas.map(f => [f.id, f]));
                    const refreshedResults = [];
                    for (const item of formulaFilteredResults) {
                        if (!item || typeof item !== 'object') continue;
                        if (item.similarity !== undefined) {
                            const updated = formulaMap.get(item.formula?.id);
                            if (updated) {
                                refreshedResults.push({ ...item, formula: updated });
                            }
                        } else {
                            const updated = formulaMap.get(item.id);
                            if (updated) {
                                refreshedResults.push(updated);
                            }
                        }
                    }
                    formulaFilteredResults = refreshedResults;
                }

                filterMainDisplay({
                    targetPage: preserveMainPage ? previousMainPage : 1
                });

                if (preserveFormulaPage) {
                    if (formulaFilteredResults.length > 0) {
                        const totalFormulaPages = Math.max(1, Math.ceil(formulaFilteredResults.length / ITEMS_PER_PAGE));
                        formulaCurrentPage = Math.min(Math.max(previousFormulaPage, 1), totalFormulaPages);
                        displayResults(formulaFilteredResults, formulaResultsGrid, formulaResultsCount, formulaNoResults, formulaPagination, formulaCurrentPage, 'formula');
                    } else {
                        formulaCurrentPage = 1;
                        displayResults([], formulaResultsGrid, formulaResultsCount, formulaNoResults, formulaPagination, 1, 'formula');
                    }
                }

                analyticsData = null;
                if (activeView === 'analytics') {
                    renderAnalytics(true);
                }
            } catch (error) {
                console.error("Could not fetch formulas:", error);
                mainResultsGrid.innerHTML = `<p class="text-red-500 text-center col-span-full">เกิดข้อผิดพลาดในการโหลดข้อมูล</p>`;
            }
        }

        const chartPalette = ['#6366F1', '#10B981', '#F59E0B', '#EF4444', '#3B82F6', '#8B5CF6', '#EC4899', '#14B8A6', '#F97316', '#64748B', '#84CC16', '#0EA5E9'];
        const monthDisplayLabels = ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.'];

        function getColorPalette(length) {
            return Array.from({ length }, (_, index) => chartPalette[index % chartPalette.length]);
        }

        function destroyChart(chartKey) {
            const chart = analyticsCharts[chartKey];
            if (chart) {
                chart.destroy();
                delete analyticsCharts[chartKey];
            }
        }

        function updateChart(chartKey, canvasEl, config) {
            if (!canvasEl || typeof Chart === 'undefined') return;
            const existingChart = analyticsCharts[chartKey];

            if (existingChart) {
                existingChart.options = config.options;
                existingChart.config.type = config.type;
                existingChart.data = config.data;
                existingChart.update('none');
                existingChart.resize();
                return;
            }

            canvasEl.style.height = '';
            canvasEl.style.width = '';
            canvasEl.removeAttribute('height');
            canvasEl.removeAttribute('width');
            analyticsCharts[chartKey] = new Chart(canvasEl.getContext('2d'), config);
        }

        function syncYearOptions(years) {
            if (!analyticsYearSelect) return;
            const yearValues = years.map(year => String(year));
            const currentOptions = Array.from(analyticsYearSelect.options).map(option => option.value);
            const sameOptions = yearValues.length === currentOptions.length && yearValues.every((value, index) => value === currentOptions[index]);

            if (yearValues.length === 0) {
                analyticsYearSelect.innerHTML = '<option value="">ไม่มีข้อมูล</option>';
                analyticsYearSelect.disabled = true;
                selectedAnalyticsYear = null;
                analyticsYearSelect.value = '';
                return;
            }

            if (!sameOptions) {
                analyticsYearSelect.innerHTML = yearValues.map(year => `<option value="${year}">${year}</option>`).join('');
            }

            analyticsYearSelect.disabled = false;
            if (!yearValues.includes(String(selectedAnalyticsYear))) {
                selectedAnalyticsYear = yearValues[0];
            }
            analyticsYearSelect.value = String(selectedAnalyticsYear);
        }

        function refreshMonthlyChart() {
            if (!analyticsMonthlyChartEl) return;

            if (!analyticsMonthlyData || !Array.isArray(analyticsMonthlyData.years) || analyticsMonthlyData.years.length === 0) {
                destroyChart('monthly');
                if (analyticsMonthlyWrapper) analyticsMonthlyWrapper.classList.add('hidden');
                analyticsMonthlyChartEl.classList.add('hidden');
                if (analyticsMonthlyEmpty) analyticsMonthlyEmpty.classList.remove('hidden');
                return;
            }

            const availableYears = analyticsMonthlyData.years.map(year => String(year));
            if (!selectedAnalyticsYear || !availableYears.includes(String(selectedAnalyticsYear))) {
                selectedAnalyticsYear = availableYears[0];
            }

            const chosenYear = String(selectedAnalyticsYear);
            if (analyticsYearSelect) {
                analyticsYearSelect.value = chosenYear;
            }

            const months = analyticsMonthlyData.data?.[chosenYear] || monthDisplayLabels.map(label => ({ label, count: 0 }));

            if (analyticsMonthlyWrapper) analyticsMonthlyWrapper.classList.remove('hidden');
            analyticsMonthlyChartEl.classList.remove('hidden');
            if (analyticsMonthlyEmpty) analyticsMonthlyEmpty.classList.add('hidden');

            updateChart('monthly', analyticsMonthlyChartEl, {
                type: 'line',
                data: {
                    labels: months.map(item => item.label),
                    datasets: [{
                        label: 'จำนวนสูตร',
                        data: months.map(item => item.count),
                        borderColor: '#6366F1',
                        backgroundColor: 'rgba(99, 102, 241, 0.15)',
                        pointBackgroundColor: '#4338CA',
                        tension: 0.35,
                        fill: true,
                        pointRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { legend: { display: false } },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: { precision: 0 }
                        }
                    }
                }
            });
        }

        function updateAnalyticsUI(rawData) {
            const data = rawData || {};
            const asNumber = (value) => (typeof value === 'number' && !Number.isNaN(value) ? value : 0);

            analyticsTotalFormulas.textContent = asNumber(data.totalFormulas).toLocaleString('th-TH');
            analyticsTotalBooks.textContent = asNumber(data.totalBooks).toLocaleString('th-TH');
            analyticsLatestDate.textContent = data.latestFormulaDate || 'ยังไม่มีข้อมูล';

            const ingredients = Array.isArray(data.topMotherCodes) ? data.topMotherCodes : [];
            if (ingredients.length === 0) {
                analyticsTopIngredients.innerHTML = '<li class="text-gray-500">ยังไม่มีข้อมูลสำหรับคำนวณ</li>';
            } else {
                analyticsTopIngredients.innerHTML = ingredients.map((item, index) => {
                    const nameLine = item.name ? `<p class="text-xs text-gray-500">${item.name}</p>` : '';
                    const countText = item.count != null ? item.count.toLocaleString('th-TH') : '0';
                    return `<li class="flex justify-between items-start bg-white/70 rounded-md px-3 py-2"><div><p class="font-semibold text-gray-800">${index + 1}. ${item.motherCode}</p>${nameLine}</div><span class="text-sm font-medium text-gray-600">${countText} สูตร</span></li>`;
                }).join('');
            }

            const books = Array.isArray(data.formulasByBook) ? data.formulasByBook.slice(0, 10) : [];
            if (books.length > 0 && analyticsBookChartEl) {
                if (analyticsBookWrapper) analyticsBookWrapper.classList.remove('hidden');
                analyticsBookChartEl.classList.remove('hidden');
                analyticsBookEmpty.classList.add('hidden');
                updateChart('books', analyticsBookChartEl, {
                    type: 'bar',
                    data: {
                        labels: books.map(item => item.label),
                        datasets: [{
                            label: 'จำนวนสูตร',
                            data: books.map(item => item.count),
                            backgroundColor: getColorPalette(books.length),
                            borderRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { legend: { display: false } },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { precision: 0 }
                            }
                        }
                    }
                });
            } else {
                destroyChart('books');
                if (analyticsBookWrapper) analyticsBookWrapper.classList.add('hidden');
                if (analyticsBookChartEl) analyticsBookChartEl.classList.add('hidden');
                if (analyticsBookEmpty) analyticsBookEmpty.classList.remove('hidden');
            }

            const yarns = Array.isArray(data.formulasByYarnType) ? data.formulasByYarnType : [];
            if (yarns.length > 0 && analyticsYarnChartEl) {
                if (analyticsYarnWrapper) analyticsYarnWrapper.classList.remove('hidden');
                analyticsYarnChartEl.classList.remove('hidden');
                analyticsYarnEmpty.classList.add('hidden');
                updateChart('yarns', analyticsYarnChartEl, {
                    type: 'doughnut',
                    data: {
                        labels: yarns.map(item => item.label),
                        datasets: [{
                            label: 'จำนวนสูตร',
                            data: yarns.map(item => item.count),
                            backgroundColor: getColorPalette(yarns.length),
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: { boxWidth: 12 }
                            }
                        }
                    }
                });
            } else {
                destroyChart('yarns');
                if (analyticsYarnWrapper) analyticsYarnWrapper.classList.add('hidden');
                if (analyticsYarnChartEl) analyticsYarnChartEl.classList.add('hidden');
                if (analyticsYarnEmpty) analyticsYarnEmpty.classList.remove('hidden');
            }

            const monthly = data.monthlyTrend;
            if (monthly && Array.isArray(monthly.years) && monthly.years.length > 0) {
                const years = monthly.years.map(year => String(year));
                analyticsMonthlyData = {
                    years,
                    data: monthly.data || {}
                };
                if (!selectedAnalyticsYear || !years.includes(String(selectedAnalyticsYear))) {
                    selectedAnalyticsYear = years[0];
                }
                syncYearOptions(years);
                refreshMonthlyChart();
            } else {
                analyticsMonthlyData = null;
                selectedAnalyticsYear = null;
                syncYearOptions([]);
                destroyChart('monthly');
                if (analyticsMonthlyWrapper) analyticsMonthlyWrapper.classList.add('hidden');
                if (analyticsMonthlyChartEl) analyticsMonthlyChartEl.classList.add('hidden');
                if (analyticsMonthlyEmpty) analyticsMonthlyEmpty.classList.remove('hidden');
            }
        }

        async function renderAnalytics(forceReload = false) {
            if (!analyticsView) return;

            analyticsError.classList.add('hidden');
            analyticsError.textContent = '';
            if (analyticsLoading) analyticsLoading.classList.remove('hidden');
            analyticsContent.classList.add('hidden');

            if (typeof Chart === 'undefined') {
                if (analyticsLoading) analyticsLoading.classList.add('hidden');
                analyticsError.textContent = 'ไม่สามารถโหลดไลบรารีแสดงผลกราฟได้';
                analyticsError.classList.remove('hidden');
                return;
            }

            try {
                if (forceReload || !analyticsData) {
                    const response = await window.electronAPI.getAnalytics();
                    if (!response || response.success === false) {
                        throw new Error(response?.message || 'ไม่สามารถโหลดข้อมูลได้');
                    }
                    analyticsData = response.data || null;
                }

                updateAnalyticsUI(analyticsData);
                if (analyticsLoading) analyticsLoading.classList.add('hidden');
                analyticsContent.classList.remove('hidden');
            } catch (error) {
                if (analyticsLoading) analyticsLoading.classList.add('hidden');
                analyticsContent.classList.add('hidden');
                analyticsError.textContent = error.message || 'ไม่สามารถโหลดข้อมูลได้';
                analyticsError.classList.remove('hidden');
            }
        }


        // --- DISPLAY LOGIC ---
        function displayResults(items, gridEl, countEl, noResultsEl, paginationEl, currentPage, viewType) {
            gridEl.innerHTML = '';
            
            if (!items || items.length === 0) {
                 countEl.textContent = 'พบ 0 รายการ';
                noResultsEl.classList.remove('hidden');
                paginationEl.innerHTML = '';
                return;
            }
             countEl.textContent = `พบ ${items.length} รายการ`;
            noResultsEl.classList.add('hidden');
            
            const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
            const endIndex = startIndex + ITEMS_PER_PAGE;
            const paginatedItems = items.slice(startIndex, endIndex);

            paginatedItems.forEach(item => {
                const formulaObject = item.similarity !== undefined ? item.formula : item;
                const similarity = item.similarity;
                const similarityHtml = similarity !== undefined ? `<div class="text-center bg-blue-100 text-blue-800 font-bold py-2 px-4 rounded-lg my-4">ความใกล้เคียง: ${similarity.toFixed(1)}%</div>` : '';
                const formulaListHtml = formulaObject.formula.map(ing => `<li class="flex justify-between items-center"><span class="text-gray-700">${ing.motherCode} <span class="text-gray-500 text-xs">${ing.name || ''}</span></span><span class="font-mono text-gray-800">${parseFloat(ing.percentage).toFixed(5)}</span></li>`).join('');
                const card = document.createElement('div');
                card.className = 'bg-white rounded-xl shadow-md overflow-hidden formula-card';
                card.innerHTML = `
                    <div class="p-6">
                        <div class="flex justify-between items-start">
                            <div>
                                <div class="uppercase tracking-wide text-sm text-indigo-600 font-semibold">${formulaObject.resultCode}</div>
                                <p class="block mt-1 text-lg leading-tight font-medium text-black">${formulaObject.yarnType} - ${formulaObject.yarnModel}</p>
                                <p class="mt-2 text-gray-500 text-sm">วันที่: ${formulaObject.date}</p>
                            </div>
                            <div class="w-16 h-16 rounded-lg flex-shrink-0" style="background-color: ${formulaObject.swatchColor}; border: 1px solid #ddd;"></div>
                        </div>
                        ${similarityHtml}
                        <div class="text-center bg-green-100 text-green-800 font-bold py-2 px-4 rounded-lg my-4">
                            เล่ม: ${formulaObject.book}, หน้าที ${formulaObject.page}, แถว ${formulaObject.row}
                        </div>
                        <div class="pt-4 border-t border-gray-200">
                            <h4 class="font-semibold text-gray-700 mb-2">สูตรสี (%):</h4>
                            <ul class="space-y-1 text-sm">${formulaListHtml}</ul>
                        </div>
                        <div class="pt-4 mt-4 border-t border-gray-200 text-right space-x-2">
                            <button class="edit-btn px-4 py-2 bg-gray-200 text-gray-800 text-sm font-semibold rounded-lg hover:bg-gray-300 transition">แก้ไข</button>
                            <button class="delete-btn px-4 py-2 bg-red-100 text-red-700 text-sm font-semibold rounded-lg hover:bg-red-200 transition">ลบ</button>
                        </div>
                    </div>`;
                card.querySelector('.edit-btn').addEventListener('click', () => openEditModal(formulaObject));
                card.querySelector('.delete-btn').addEventListener('click', () => openDeleteModal(formulaObject));
                gridEl.appendChild(card);
            });
            
            renderPagination(items.length, currentPage, paginationEl, viewType);
        }
        
        function renderPagination(totalItems, currentPage, containerEl, viewType) {
            containerEl.innerHTML = '';
            const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
            if (totalPages <= 1) return;
            const createBtn = (text, page, isDisabled = false, isCurrent = false) => {
                const btn = document.createElement('button');
                btn.innerHTML = text;
                btn.disabled = isDisabled;
                btn.className = `page-btn px-4 py-2 border rounded-md font-semibold ${isCurrent ? 'active' : 'bg-white'}`;
                if (!isDisabled) {
                    btn.onclick = () => {
                         if (viewType === 'main') {
                           mainCurrentPage = page;
                           displayResults(mainFilteredResults, mainResultsGrid, mainResultsCount, mainNoResults, mainPagination, mainCurrentPage, 'main');
                         } else if (viewType === 'formula') {
                           formulaCurrentPage = page;
                           displayResults(formulaFilteredResults, formulaResultsGrid, formulaResultsCount, formulaNoResults, formulaPagination, formulaCurrentPage, 'formula');
                         }
                    };
                }
                return btn;
            };
            containerEl.appendChild(createBtn('&laquo;', currentPage - 1, currentPage === 1));
            let hasLeftEllipsis = false, hasRightEllipsis = false;
            for (let i = 1; i <= totalPages; i++) {
                 if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
                    containerEl.appendChild(createBtn(i, i, false, i === currentPage));
                 } else if (i < currentPage && !hasLeftEllipsis) {
                    containerEl.appendChild(createBtn('...', 0, true)); hasLeftEllipsis = true;
                 } else if (i > currentPage && !hasRightEllipsis) {
                    containerEl.appendChild(createBtn('...', 0, true)); hasRightEllipsis = true;
                 }
            }
            containerEl.appendChild(createBtn('&raquo;', currentPage + 1, currentPage === totalPages));
        }
        
        function filterMainDisplay(options = {}) {
            const targetPage = Number.isFinite(options.targetPage) ? options.targetPage : null;
            const filters = Object.fromEntries(Object.entries(mainInputs).map(([key, input]) => [key, input.value.toLowerCase()]));

            // Log search activity (only if there are filters)
            const hasFilters = Object.values(filters).some(v => v);
            if (hasFilters && window.electronAPI && window.electronAPI.logUserActivity) {
                const searchTerms = Object.entries(filters)
                    .filter(([_, value]) => value)
                    .map(([key, value]) => `${key}:${value}`)
                    .join(',');

                window.electronAPI.logUserActivity('search', {
                    category: 'main-search',
                    viewName: 'main',
                    searchQuery: searchTerms,
                    searchType: 'main-filter'
                });
            }

            mainFilteredResults = allColorFormulas.filter(f =>
                (f.book ? f.book.toLowerCase().includes(filters.book) : true) &&
                f.resultCode.toLowerCase().includes(filters.resultCode) &&
                f.yarnType.toLowerCase().includes(filters.yarnType) &&
                f.yarnModel.toLowerCase().includes(filters.yarnModel) &&
                (filters.page ? f.page.toString() === filters.page : true)
            );
            const totalPages = Math.max(1, Math.ceil(mainFilteredResults.length / ITEMS_PER_PAGE));
            if (targetPage && targetPage > 0) {
                mainCurrentPage = Math.min(targetPage, totalPages);
            } else {
                mainCurrentPage = 1;
            }
            displayResults(mainFilteredResults, mainResultsGrid, mainResultsCount, mainNoResults, mainPagination, mainCurrentPage, 'main');
        }

        function addCriterionRow() {
            const rowId = `criterion-${Date.now()}`;
            const row = document.createElement('div');
            row.id = rowId;
            row.className = 'grid grid-cols-1 md:grid-cols-6 gap-2 items-center';
            row.innerHTML = `
                <div class="md:col-span-3">
                    <label class="text-sm font-medium text-gray-700">รหัสแม่สี</label>
                    <input type="text" placeholder="เช่น D01231..." class="criterion-code w-full mt-1 px-3 py-2 border border-gray-300 rounded-lg">
                </div>
                <div class="md:col-span-2">
                    <label class="text-sm font-medium text-gray-700">% สี (ถ้ามี)</label>
                    <input type="number" step="0.0001" placeholder="เช่น 0.212" class="criterion-percent w-full mt-1 px-3 py-2 border border-gray-300 rounded-lg">
                </div>
                <div class="text-right pt-5">
                    <button onclick="document.getElementById('${rowId}').remove()" class="px-3 py-2 bg-red-500 text-white font-bold rounded-lg hover:bg-red-600">ลบ</button>
                </div>`;
            criteriaContainer.appendChild(row);
        }
        
        function handleFormulaSearch() {
            const searchCriteria = Array.from(criteriaContainer.querySelectorAll('.grid')).map(node => ({
                code: node.querySelector('.criterion-code').value.toLowerCase().trim(),
                percent: parseFloat(node.querySelector('.criterion-percent').value)
            })).filter(c => c.code);

            // Log search activity
            if (window.electronAPI && window.electronAPI.logUserActivity && searchCriteria.length > 0) {
                window.electronAPI.logUserActivity('search', {
                    category: 'formula-search',
                    viewName: 'formula',
                    searchQuery: searchCriteria.map(c => `${c.code}:${c.percent}`).join(','),
                    searchType: 'formula-criteria'
                });
            }

            if (searchCriteria.length === 0) {
                formulaFilteredResults = [];
                formulaResultsCount.textContent = '';
                displayResults([], formulaResultsGrid, formulaResultsCount, formulaNoResults, formulaPagination, 1, 'formula');
                return;
            }

            const results = [];
            allColorFormulas.forEach(cf => {
                const hasAllCodes = searchCriteria.every(crit => cf.formula.some(ing => ing.motherCode.toLowerCase().includes(crit.code)));
                if (hasAllCodes) {
                    let totalSimilarity = 0;
                    let criteriaCount = searchCriteria.length;
                    
                    searchCriteria.forEach(crit => {
                        const ingredient = cf.formula.find(ing => ing.motherCode.toLowerCase().includes(crit.code));
                        if (ingredient) {
                            if (!isNaN(crit.percent)) {
                                const difference = Math.abs(crit.percent - ingredient.percentage);
                                const similarity = Math.max(0, 100 * (1 - (difference / Math.max(0.1, crit.percent))));
                                totalSimilarity += similarity;
                            } else {
                                totalSimilarity += 100;
                            }
                        }
                    });
                    
                    const averageSimilarity = totalSimilarity / criteriaCount;
                    results.push({ formula: cf, similarity: averageSimilarity });
                }
            });

            if (results.length > 0) {
                results.sort((a, b) => b.similarity - a.similarity);
                formulaFilteredResults = results;
                const isExact = results.some(r => r.similarity === 100);
                formulaResultsCount.innerHTML = isExact ? `พบสูตรที่ตรงกัน ${results.filter(r => r.similarity === 100).length} รายการ` : `ไม่พบสูตรที่ตรงกัน <span class="font-bold">แต่พบผลลัพธ์ที่ใกล้เคียง ${results.length} รายการ</span>`;
            } else {
                formulaFilteredResults = [];
                formulaResultsCount.textContent = "ไม่พบสูตรสีที่ตรงกับเงื่อนไข";
            }
            
            formulaCurrentPage = 1;
            displayResults(formulaFilteredResults, formulaResultsGrid, formulaResultsCount, formulaNoResults, formulaPagination, 1, 'formula');
        }

        function setActiveView(viewName) {
            // Check if trying to access data management without permission
            if (viewName === 'wipe' && !dataManagementAccess) {
                viewName = 'data-management-login';
            }

            activeView = viewName;
            const views = {
                main: mainView,
                formula: formulaSearchView,
                analytics: analyticsView,
                wipe: wipeView,
                'data-management-login': dataManagementLogin
            };
            const buttons = {
                main: navMainBtn,
                formula: navFormulaBtn,
                analytics: navAnalyticsBtn,
                wipe: navWipeBtn
            };

            Object.entries(views).forEach(([key, view]) => {
                if (view) view.classList.toggle('hidden', key !== viewName);
            });

            // Update button states (don't show active state for login view)
            Object.entries(buttons).forEach(([key, button]) => {
                if (button) {
                    if (viewName === 'data-management-login' && key === 'wipe') {
                        button.classList.add('active');
                    } else {
                        button.classList.toggle('active', key === viewName);
                    }
                }
            });

            if (viewName === 'formula' && criteriaContainer.children.length === 0) addCriterionRow();
            // Analytics will be handled by the overridden setActiveView function
            if (viewName === 'data-management-login' && dataAccessCode) {
                // Focus on password input and clear any previous errors
                setTimeout(() => {
                    dataAccessCode.focus();
                    if (dataAccessError) dataAccessError.classList.add('hidden');
                }, 100);
            }

            // Reset data management access when leaving wipe view
            if (viewName !== 'wipe' && viewName !== 'data-management-login' && dataManagementAccess) {
                dataManagementAccess = false;
            }
        }

        // Export Handler Functions
        async function handleExportSQLite() {
            if (!exportSQLiteBtn || !exportSQLiteLoader || !exportStatus) return;

            try {
                exportSQLiteBtn.disabled = true;
                exportSQLiteLoader.classList.remove('hidden');
                exportStatus.innerHTML = '<p class="text-blue-600"><i class="fas fa-database"></i> กำลัง Export SQLite Database...</p>';

                const result = await window.electronAPI.exportSQLite();

                if (result.success) {
                    exportStatus.innerHTML = `<p class="text-green-600"><i class="fas fa-check-circle"></i> Export SQLite สำเร็จ!</p>`;
                    showNotification('Export SQLite Database สำเร็จ!', true);
                } else {
                    throw new Error(result.message || 'เกิดข้อผิดพลาดในการ Export SQLite');
                }
            } catch (error) {
                console.error('Export SQLite Error:', error);
                exportStatus.innerHTML = `<p class="text-red-600"><i class="fas fa-exclamation-triangle"></i> ${error.message}</p>`;
                showNotification('Export SQLite Database ล้มเหลว', false);
            } finally {
                exportSQLiteBtn.disabled = false;
                exportSQLiteLoader.classList.add('hidden');
                setTimeout(() => {
                    exportStatus.innerHTML = '';
                }, 5000);
            }
        }

        async function handleExportExcel() {
            if (!exportExcelBtn || !exportExcelLoader || !exportStatus) return;

            try {
                exportExcelBtn.disabled = true;
                exportExcelLoader.classList.remove('hidden');
                exportStatus.innerHTML = '<p class="text-blue-600"><i class="fas fa-file-excel"></i> กำลัง Export Excel Database...</p>';

                const result = await window.electronAPI.exportExcel();

                if (result.success) {
                    exportStatus.innerHTML = `<p class="text-green-600"><i class="fas fa-check-circle"></i> Export Excel สำเร็จ! (${result.totalFormulas || 0} สูตร)</p>`;
                    showNotification(`Export Excel สำเร็จ! รวม ${result.totalFormulas || 0} สูตร`, true);
                } else {
                    throw new Error(result.message || 'เกิดข้อผิดพลาดในการ Export Excel');
                }
            } catch (error) {
                console.error('Export Excel Error:', error);
                exportStatus.innerHTML = `<p class="text-red-600"><i class="fas fa-exclamation-triangle"></i> ${error.message}</p>`;
                showNotification('Export Excel Database ล้มเหลว', false);
            } finally {
                exportExcelBtn.disabled = false;
                exportExcelLoader.classList.add('hidden');
                setTimeout(() => {
                    exportStatus.innerHTML = '';
                }, 5000);
            }
        }

        // Data Management Access Control
        function toggleDataPasswordVisibility() {
            if (!dataAccessCode || !dataEyeIcon) return;

            if (dataAccessCode.type === 'password') {
                dataAccessCode.type = 'text';
                dataEyeIcon.className = 'fas fa-eye-slash';
            } else {
                dataAccessCode.type = 'password';
                dataEyeIcon.className = 'fas fa-eye';
            }
        }

        async function handleDataAccess(event) {
            event.preventDefault();
            if (!dataAccessCode || !dataAccessSubmit || !dataAccessError) return;

            const code = dataAccessCode.value.trim();

            if (!code) {
                showDataAccessError('กรุณาใส่รหัสเข้าถึง');
                return;
            }

            // Show loading
            dataAccessSubmit.disabled = true;
            dataAccessBtnText.classList.add('hidden');
            dataAccessLoader.classList.remove('hidden');
            dataAccessError.classList.add('hidden');

            // Simulate authentication delay
            setTimeout(() => {
                if (code === DATA_ACCESS_CODE) {
                    dataManagementAccess = true;
                    dataAccessCode.value = '';
                    showDataAccessSuccess();
                    setTimeout(() => {
                        setActiveView('wipe');
                    }, 500);
                } else {
                    showDataAccessError('รหัสเข้าถึงไม่ถูกต้อง');
                    dataAccessCode.value = '';
                    dataAccessCode.focus();
                }

                // Hide loading
                dataAccessSubmit.disabled = false;
                dataAccessBtnText.classList.remove('hidden');
                dataAccessLoader.classList.add('hidden');
            }, 800);
        }

        function showDataAccessError(message) {
            if (!dataAccessError) return;
            dataAccessError.textContent = message;
            dataAccessError.classList.remove('hidden');
            dataAccessError.className = dataAccessError.className.replace('text-green-600', 'text-red-600');
        }

        function showDataAccessSuccess() {
            if (!dataAccessError) return;
            dataAccessError.textContent = 'เข้าสู่ระบบสำเร็จ กำลังเข้าสู่หน้าจัดการข้อมูล...';
            dataAccessError.classList.remove('hidden');
            dataAccessError.className = dataAccessError.className.replace('text-red-600', 'text-green-600');
        }

        function showNotification(message, isSuccess = true) {
            notificationMessage.textContent = message;
            notificationToast.className = `fixed bottom-5 right-5 text-white py-3 px-6 rounded-lg shadow-lg transition-transform transform translate-y-0 opacity-100 ${isSuccess ? 'bg-green-600' : 'bg-red-600'}`;
            setTimeout(() => {
                notificationToast.className = notificationToast.className.replace('translate-y-0 opacity-100', 'translate-y-20 opacity-0');
            }, 3000);
        }

        async function handleWipeAll(event) {
            event.preventDefault();
            if (!wipeForm || !wipeCodeInput || !wipeConfirmBtn || !wipeStatus) return;

            const code = (wipeCodeInput.value || '').trim();

            if (!code) {
                wipeStatus.innerHTML = '<p class="text-red-600 font-semibold">กรุณากรอกรหัสยืนยันก่อน</p>';
                return;
            }

            const originalText = wipeConfirmBtn.textContent;
            wipeConfirmBtn.disabled = true;
            wipeConfirmBtn.textContent = 'กำลังลบข้อมูล...';
            wipeStatus.innerHTML = '<p class="text-blue-600">กำลังประมวลผล...</p>';

            try {
                const response = await window.electronAPI.wipeDatabase(code);
                if (!response || response.success === false) {
                    const message = response?.message || 'ไม่สามารถลบข้อมูลได้';
                    wipeStatus.innerHTML = `<p class="text-red-600 font-semibold">${message}</p>`;
                } else {
                    wipeStatus.innerHTML = '<p class="text-green-600 font-semibold">ลบข้อมูลทั้งหมดสำเร็จ</p>';
                    wipeCodeInput.value = '';
                    await fetchFormulas(); // Refresh data
                    refreshMainDisplay(); // Refresh main view
                    analyticsData = null; // Clear analytics cache
                    showNotification('ลบข้อมูลทั้งหมดสำเร็จ!', true);

                    // Auto-navigate to main view after 2 seconds
                    setTimeout(() => {
                        setActiveView('main');
                    }, 2000);
                }
            } catch (error) {
                wipeStatus.innerHTML = `<p class="text-red-600 font-semibold">เกิดข้อผิดพลาด: ${error.message}</p>`;
            } finally {
                wipeConfirmBtn.disabled = false;
                wipeConfirmBtn.textContent = originalText;
            }
        }

        // --- Color Picker Logic ---
        function hexToRgb(hex) {
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? { r: parseInt(result[1], 16), g: parseInt(result[2], 16), b: parseInt(result[3], 16) } : null;
        }

        function colorDistance(rgb1, rgb2) {
            if (!rgb1 || !rgb2) return Infinity;
            return Math.sqrt(Math.pow(rgb1.r - rgb2.r, 2) + Math.pow(rgb1.g - rgb2.g, 2) + Math.pow(rgb1.b - rgb2.b, 2));
        }

        function handleColorSearch() {
            const pickedColorHex = document.getElementById('colorPickerInput').value;
            const pickedColorRgb = hexToRgb(pickedColorHex);
            if (!pickedColorRgb) return;

            // Log search activity
            if (window.electronAPI && window.electronAPI.logUserActivity) {
                window.electronAPI.logUserActivity('search', {
                    category: 'color-search',
                    viewName: 'formula',
                    searchQuery: pickedColorHex,
                    searchType: 'color-picker'
                });
            }

            const maxDistance = Math.sqrt(Math.pow(255, 2) * 3);
            
            const colorMatches = allColorFormulas.map(cf => {
                const formulaRgb = hexToRgb(cf.swatchColor);
                const distance = colorDistance(pickedColorRgb, formulaRgb);
                const similarity = 100 * (1 - distance / maxDistance);
                return { formula: cf, similarity };
            }).filter(item => item.similarity > 0); 

            colorMatches.sort((a, b) => b.similarity - a.similarity);

            formulaFilteredResults = colorMatches;
            formulaResultsCount.innerHTML = `พบสูตรสีที่ใกล้เคียงกับ <span class="inline-block w-4 h-4 rounded-full align-middle" style="background-color:${pickedColorHex}"></span> ${colorMatches.length} รายการ`;
            displayResults(formulaFilteredResults, formulaResultsGrid, formulaResultsCount, formulaNoResults, formulaPagination, 1, 'formula');
        }

        // --- Edit Modal Logic ---
        function openEditModal(formula) {
            document.getElementById('editFormulaId').value = formula.id;
            document.getElementById('editBook').value = formula.book;
            document.getElementById('editPage').value = formula.page;
            document.getElementById('editRow').value = formula.row;
            document.getElementById('editSwatchColor').value = formula.swatchColor;
            editModal.classList.remove('hidden');
        }

        async function handleUpdateFormula() {
            const id = document.getElementById('editFormulaId').value;
            const updatedData = {
                id,
                book: document.getElementById('editBook').value,
                page: parseInt(document.getElementById('editPage').value, 10),
                row: parseInt(document.getElementById('editRow').value, 10),
                swatchColor: document.getElementById('editSwatchColor').value
            };
            try {
                const result = await window.electronAPI.updateFormula(updatedData);
                if (!result.success) throw new Error(result.message);
                editModal.classList.add('hidden');
                showNotification('บันทึกข้อมูลสำเร็จ!');
                await fetchFormulas({
                    preserveMainPage: activeView === 'main',
                    preserveFormulaPage: activeView === 'formula'
                });
            } catch (error) {
                console.error("Update failed:", error);
                showNotification('การอัปเดตล้มเหลว: ' + error.message, false);
            }
        }

        // --- Delete Modal Logic ---
        function openDeleteModal(formula) {
            document.getElementById('deleteFormulaId').value = formula.id;
            deleteModal.classList.remove('hidden');
        }

        async function handleDeleteFormula() {
            const id = document.getElementById('deleteFormulaId').value;
            const confirmBtn = document.getElementById('confirmDeleteBtn');
            confirmBtn.disabled = true;

            try {
                const result = await window.electronAPI.deleteFormula(id);
                if (!result.success) {
                    throw new Error(result.message || 'Server error');
                }
                
                deleteModal.classList.add('hidden');
                showNotification('ลบข้อมูลสำเร็จ!');
                await fetchFormulas({
                    preserveMainPage: activeView === 'main',
                    preserveFormulaPage: activeView === 'formula'
                });
            } catch (error) {
                console.error("Delete failed:", error);
                showNotification(`การลบล้มเหลว: ${error.message}`, false);
            } finally {
                confirmBtn.disabled = false;
            }
        }

        // --- Import Excel Logic (in Data Management) ---
        const selectExcelBtn = document.getElementById('selectExcelBtn');
        const importExcelBtn = document.getElementById('importExcelBtn');
        const selectedFileName = document.getElementById('selectedFileName');
        const importBtnText = document.getElementById('importBtnText');
        const importLoader = document.getElementById('importLoader');
        const importStatus = document.getElementById('importStatus');
        const importStatusContent = document.getElementById('importStatusContent');

        // Import file selection
        if (selectExcelBtn) {
            selectExcelBtn.addEventListener('click', async () => {
                const filePath = await window.electronAPI.openFileDialog();
                if (filePath) {
                    const fileName = filePath.split(/(\/|\\)/).pop();
                    selectedFileName.textContent = `เลือกไฟล์: ${fileName}`;
                    selectedExcelFilePath = filePath;
                    importExcelBtn.disabled = false;
                }
            });
        }

        // Import execution
        if (importExcelBtn) {
            importExcelBtn.addEventListener('click', async () => {
                if (!selectedExcelFilePath) {
                    showImportStatus('กรุณาเลือกไฟล์', 'error');
                    return;
                }

                importExcelBtn.disabled = true;
                importBtnText.classList.add('hidden');
                importLoader.classList.remove('hidden');
                showImportStatus('กำลังนำเข้าข้อมูล...', 'loading');

                try {
                    const result = await window.electronAPI.importExcel(selectedExcelFilePath);
                    if (result.success) {
                        showImportStatus(result.message, 'success');
                        await fetchFormulas(); // Refresh data
                        refreshMainDisplay(); // Refresh main view
                        analyticsData = null; // Clear analytics cache
                        showNotification('Import ข้อมูลสำเร็จ!', true);

                        // Auto-navigate to main view after 2 seconds
                        setTimeout(() => {
                            setActiveView('main');
                        }, 2000);
                    } else {
                        let message = result.message;
                        if (result.errors && result.errors.length > 0) {
                            message += '\n\nรายละเอียดข้อผิดพลาด:\n' + result.errors.join('\n');
                        }
                        showImportStatus(message, 'error');
                        showNotification('Import ข้อมูลล้มเหลว', false);
                    }
                } catch (error) {
                    showImportStatus(`นำเข้าไม่สำเร็จ: ${error.message}`, 'error');
                    showNotification('Import ข้อมูลล้มเหลว', false);
                } finally {
                    importBtnText.classList.remove('hidden');
                    importLoader.classList.add('hidden');
                    importExcelBtn.disabled = false;
                    selectedExcelFilePath = null;
                    selectedFileName.textContent = '';
                }
            });
        }

        function showImportStatus(message, type) {
            if (!importStatus || !importStatusContent) return;

            const colors = {
                loading: 'border-blue-200 bg-blue-50',
                success: 'border-green-200 bg-green-50',
                error: 'border-red-200 bg-red-50'
            };

            const textColors = {
                loading: 'text-blue-700',
                success: 'text-green-700',
                error: 'text-red-700'
            };

            importStatus.className = `p-4 rounded-lg border ${colors[type] || colors.loading}`;
            importStatusContent.className = `text-sm ${textColors[type] || textColors.loading}`;
            importStatusContent.textContent = message;
            importStatus.classList.remove('hidden');

            if (type === 'success') {
                setTimeout(() => {
                    importStatus.classList.add('hidden');
                }, 5000);
            }
        }
        
        // --- Initialization ---
        document.addEventListener('DOMContentLoaded', () => {
            setActiveView('main');
            fetchFormulas();
            Object.values(mainInputs).forEach(input => input.addEventListener('input', filterMainDisplay));
            document.getElementById('addCriterionBtn').addEventListener('click', addCriterionRow);
            document.getElementById('formulaSearchBtn').addEventListener('click', handleFormulaSearch);
            document.getElementById('cancelEditBtn').addEventListener('click', () => editModal.classList.add('hidden'));
            document.getElementById('closeEditModalBtn').addEventListener('click', () => editModal.classList.add('hidden'));
            document.getElementById('saveEditBtn').addEventListener('click', handleUpdateFormula);
            document.getElementById('cancelDeleteBtn').addEventListener('click', () => deleteModal.classList.add('hidden'));
            document.getElementById('closeDeleteModalBtn').addEventListener('click', () => deleteModal.classList.add('hidden'));
            document.getElementById('confirmDeleteBtn').addEventListener('click', handleDeleteFormula);
            navMainBtn.addEventListener('click', () => setActiveView('main'));
            navFormulaBtn.addEventListener('click', () => setActiveView('formula'));
            navAnalyticsBtn.addEventListener('click', () => setActiveView('analytics'));
            navWipeBtn.addEventListener('click', () => setActiveView('wipe'));
            if (analyticsYearSelect) {
                analyticsYearSelect.addEventListener('change', () => {
                    selectedAnalyticsYear = analyticsYearSelect.value || null;
                    refreshMonthlyChart();
                });
            }
            if (wipeForm) {
                wipeForm.addEventListener('submit', handleWipeAll);
            }
            document.getElementById('colorSearchBtn').addEventListener('click', handleColorSearch);

            // Export Event Listeners
            if (exportSQLiteBtn) {
                exportSQLiteBtn.addEventListener('click', handleExportSQLite);
            }
            if (exportExcelBtn) {
                exportExcelBtn.addEventListener('click', handleExportExcel);
            }

            // Data Access Event Listeners
            if (dataAccessForm) {
                dataAccessForm.addEventListener('submit', handleDataAccess);
            }
            if (toggleDataPassword) {
                toggleDataPassword.addEventListener('click', toggleDataPasswordVisibility);
            }
            if (dataAccessCode) {
                dataAccessCode.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        handleDataAccess(e);
                    }
                });
            }

            document.getElementById('downloadTemplateBtn').addEventListener('click', async () => {
                const result = await window.electronAPI.downloadTemplate();
                if (result.success) {
                    showNotification('กำลังบันทึกไฟล์เทมเพลต...');
                } else {
                    showNotification('ยกเลิกการดาวน์โหลด', false);
                }
            });




                    // Main searches
                    const mainSearchesContainer = document.getElementById('newPopularMainSearches');
                    if (mainSearchesContainer) {
                        mainSearchesContainer.innerHTML = '';
                        mainSearches.slice(0, 10).forEach(term => {
                            const termElement = document.createElement('div');
                            termElement.className = 'flex justify-between items-center p-3 bg-gray-50 rounded-lg';
                            termElement.innerHTML = `
                                <span class="font-medium text-gray-800">${term.search_query}</span>
                                <span class="text-sm text-gray-500">${term.count} ครั้ง</span>
                            `;
                            mainSearchesContainer.appendChild(termElement);
                        });
                    }

                    // Formula searches
                    const formulaSearchesContainer = document.getElementById('newPopularFormulaSearches');
                    if (formulaSearchesContainer) {
                        formulaSearchesContainer.innerHTML = '';
                        formulaSearches.slice(0, 10).forEach(term => {
                            const termElement = document.createElement('div');
                            termElement.className = 'flex justify-between items-center p-3 bg-gray-50 rounded-lg';
                            termElement.innerHTML = `
                                <span class="font-medium text-gray-800">${term.search_query}</span>
                                <span class="text-sm text-gray-500">${term.count} ครั้ง</span>
                            `;
                            formulaSearchesContainer.appendChild(termElement);
                        });
                    }
                }

                // Display popular formulas (both in data management and user-analytics views)
                if (data.popularFormulas) {
                    // For user-analytics view (new IDs)
                    const newFormulasContainer = document.getElementById('newPopularFormulas');
                    if (newFormulasContainer) {
                        newFormulasContainer.innerHTML = '';
                        if (data.popularFormulas.length === 0) {
                            newFormulasContainer.innerHTML = '<div class="text-gray-500 text-center py-4">ยังไม่มีข้อมูลการเข้าดูสูตร</div>';
                        } else {
                            data.popularFormulas.slice(0, 10).forEach(formula => {
                                const formulaElement = document.createElement('div');
                                formulaElement.className = 'flex justify-between items-center p-3 bg-gray-50 rounded-lg';
                                formulaElement.innerHTML = `
                                    <span class="font-medium text-gray-800">${formula.formula_id}</span>
                                    <span class="text-sm text-gray-500">${formula.count} ครั้ง</span>
                                `;
                                newFormulasContainer.appendChild(formulaElement);
                            });
                        }
                    }

                    // For data management view (old IDs)
                    const formulasContainer = document.getElementById('popularFormulas');
                    if (formulasContainer) {
                        formulasContainer.innerHTML = '';
                        if (data.popularFormulas.length === 0) {
                            formulasContainer.innerHTML = '<div class="text-gray-500 text-center py-4">ยังไม่มีข้อมูลการเข้าดูสูตร</div>';
                        } else {
                            data.popularFormulas.slice(0, 10).forEach(formula => {
                                const formulaElement = document.createElement('div');
                                formulaElement.className = 'flex justify-between items-center p-3 bg-gray-50 rounded-lg';
                                formulaElement.innerHTML = `
                                    <span class="font-medium text-gray-800">${formula.formula_id}</span>
                                    <span class="text-sm text-gray-500">${formula.count} ครั้ง</span>
                                `;
                                formulasContainer.appendChild(formulaElement);
                            });
                        }
                    }
                }

                // Display popular yarn types (both views)
                if (data.popularYarnTypes) {
                    // For user-analytics view (new IDs)
                    const newYarnContainer = document.getElementById('newPopularYarnTypes');
                    if (newYarnContainer) {
                        newYarnContainer.innerHTML = '';
                        if (data.popularYarnTypes.length === 0) {
                            newYarnContainer.innerHTML = '<div class="text-gray-500 text-center py-4">ยังไม่มีข้อมูลการค้นหาชนิดด้าย</div>';
                        } else {
                            data.popularYarnTypes.slice(0, 10).forEach(yarn => {
                                const yarnElement = document.createElement('div');
                                yarnElement.className = 'flex justify-between items-center p-3 bg-gray-50 rounded-lg';
                                yarnElement.innerHTML = `
                                    <span class="font-medium text-gray-800">${yarn.yarn_type}</span>
                                    <span class="text-sm text-gray-500">${yarn.count} ครั้ง</span>
                                `;
                                newYarnContainer.appendChild(yarnElement);
                            });
                        }
                    }

                    // For data management view (old IDs)
                    const yarnContainer = document.getElementById('popularYarnTypes');
                    if (yarnContainer) {
                        yarnContainer.innerHTML = '';
                        if (data.popularYarnTypes.length === 0) {
                            yarnContainer.innerHTML = '<div class="text-gray-500 text-center py-4">ยังไม่มีข้อมูลการค้นหาชนิดด้าย</div>';
                        } else {
                            data.popularYarnTypes.slice(0, 10).forEach(yarn => {
                                const yarnElement = document.createElement('div');
                                yarnElement.className = 'flex justify-between items-center p-3 bg-gray-50 rounded-lg';
                                yarnElement.innerHTML = `
                                    <span class="font-medium text-gray-800">${yarn.yarn_type}</span>
                                    <span class="text-sm text-gray-500">${yarn.count} ครั้ง</span>
                                `;
                                yarnContainer.appendChild(yarnElement);
                            });
                        }
                    }
                }

                // Display monthly usage chart for both views
                if (data.usageTimeline) {
                    renderNewUsageChart(data.usageTimeline);
                    renderUsageChart(data.usageTimeline); // Also render for data management page
                }

                // Display summary statistics
                if (data.totalSessions) {
                    const sessionsElement = document.getElementById('newTotalSessions');
                    if (sessionsElement) sessionsElement.textContent = data.totalSessions;
                }
            }

            function renderUsageChart(monthlyData) {
                const ctx = document.getElementById('usageTimelineChart');
                if (!ctx || !window.Chart) return;

                const labels = monthlyData.map(item => item.month);
                const data = monthlyData.map(item => item.count);

                // Clear any existing chart
                if (window.usageTimelineChart) {
                    window.usageTimelineChart.destroy();
                }

                window.usageTimelineChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'การใช้งานรายเดือน',
                            data: data,
                            borderColor: 'rgb(147, 51, 234)',
                            backgroundColor: 'rgba(147, 51, 234, 0.1)',
                            tension: 0.1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            title: {
                                display: true,
                                text: 'สถิติการใช้งานรายเดือน'
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }

            function renderNewUsageChart(monthlyData) {
                const ctx = document.getElementById('newUsageTimelineChart');
                if (!ctx || !window.Chart) return;

                const labels = monthlyData.map(item => item.month);
                const data = monthlyData.map(item => item.count);

                // Clear any existing chart
                if (window.newUsageTimelineChart) {
                    window.newUsageTimelineChart.destroy();
                }

                window.newUsageTimelineChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'การใช้งานรายเดือน',
                            data: data,
                            borderColor: 'rgb(6, 182, 212)',
                            backgroundColor: 'rgba(6, 182, 212, 0.1)',
                            tension: 0.1,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            title: {
                                display: true,
                                text: 'สถิติการใช้งานรายเดือน'
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }

            // Log user activity on page navigation
            function logPageNavigation(viewName) {
                if (window.electronAPI && window.electronAPI.logUserActivity) {
                    window.electronAPI.logUserActivity('navigate', {
                        category: 'navigation',
                        viewName: viewName
                    });
                }
            }

            // Override setActiveView to include logging and analytics loading
            const originalSetActiveView = setActiveView;
            setActiveView = function(viewName) {
                originalSetActiveView(viewName);
                logPageNavigation(viewName);

                // Load analytics data when entering analytics views
                if (viewName === 'analytics') {
                    renderAnalytics(true); // Force refresh analytics data
                }
            };
        });
    </script>
</body>
</html>
